{"version":3,"sources":["components/Navbar/Navbar.js","utils/API.js","components/Table/Data-Table.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","Navbar","color","light","expand","NavbarBrand","href","FormGroup","Label","for","Input","type","name","id","placeholder","axios","get","DataTable","data","React","useMemo","employees","columns","Header","accessor","sortType","useTable","initialState","filters","value","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","Table","striped","bordered","hover","dark","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","useState","setEmployees","useEffect","API","then","res","console","log","results","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yRA4BeA,EAnBI,SAACC,GAClB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,sBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBACX,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,QACLC,GAAG,SACHC,YAAY,yB,yBClBT,EACC,WACZ,OAAOC,IAAMC,IAAI,iD,eCmHNC,MA/Gf,SAAmBjB,GACjB,IAAMkB,EAAOC,IAAMC,SAAQ,kBAAMpB,EAAMqB,YAAW,CAChDrB,EAAMqB,YAEFC,EAAUH,IAAMC,SACpB,iBAAM,CACJ,CACEG,OAAQ,aACRC,SAAU,aACVC,SAAU,SAIZ,CACEF,OAAQ,YACRC,SAAU,YACVC,SAAU,SAEZ,CACEF,OAAQ,QACRC,SAAU,QACVC,SAAU,SAEZ,CACEF,OAAQ,QACRC,SAAU,QACVC,SAAU,SAEZ,CACEF,OAAQ,QACRC,SAAU,iBACVC,SAAU,SAEZ,CACEF,OAAQ,MACRC,SAAU,UACVC,SAAU,YAGd,IAvCsB,EAgDpBC,mBACF,CACEJ,UACAJ,OACAS,aAAc,CAEZC,QAAS,CACP,CACEf,GAAI,aACJgB,MAAO,OAMfC,aApBAC,EA3CsB,EA2CtBA,cACAC,EA5CsB,EA4CtBA,kBACAC,EA7CsB,EA6CtBA,aACAC,EA9CsB,EA8CtBA,KACAC,EA/CsB,EA+CtBA,WAmBF,OACE,kBAACC,EAAA,EAAD,eAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,MAAI,GAAKT,KACrC,+BACGE,EAAaQ,KAAI,SAACC,GAAD,OAChB,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,uBACMA,EAAOC,eACTD,EAAOE,wBAGRF,EAAOG,OAAO,UACf,oCACM,IACHH,EAAOI,SACJJ,EAAOK,aACL,gBACA,gBACF,GAAI,cAOpB,0BAAWlB,IACRE,EAAKO,KAAI,SAACU,GAET,OADAhB,EAAWgB,GAET,uBAAQA,EAAIC,cACTD,EAAIE,MAAMZ,KAAI,SAACa,GACd,OACE,uBAAQA,EAAKC,eACVD,EAAKN,OAAO,mBC/ElBQ,MArBf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNpC,EADM,KACKqC,EADL,KASb,OAPAC,qBAAU,WACRC,IAAmBC,MAAK,SAACC,GACvBC,QAAQC,IAAIF,GACZJ,EAAaI,EAAI5C,KAAK+C,cAEvB,IAGD,6BACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW5C,UAAWA,QCTZ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASvB,OACP,kBAAC,IAAMwB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.c78c8f43.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  FormGroup,\n  Label,\n  Input,\n} from \"reactstrap\";\n\nconst Navigation = (props) => {\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Employee Directory</NavbarBrand>\n        <FormGroup>\n          <Label for=\"exampleEmail\"></Label>\n          <Input\n            type=\"text\"\n            name=\"input\"\n            id=\"Search\"\n            placeholder=\"Search Last Name\"\n          />\n        </FormGroup>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import axios from \"axios\";\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\n  },\n};\n","import React from \"react\";\nimport { useTable, useSortBy } from \"react-table\";\nimport { Table } from \"reactstrap\";\n// Had to take out useFilters for time being. It goes in react-table\n// useFilters,\n\n// Reference: https://react-table.tanstack.com/docs/quick-start\n\nfunction DataTable(props) {\n  const data = React.useMemo(() => props.employees, [\n    props.employees,\n  ]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"First Name\",\n        accessor: \"name.first\",\n        sortType: \"basic\",\n        // filter: (rows, id, filterType) =>\n        //   rows.filter((row) => row.values[id].startsWith(filterType)),\n      },\n      {\n        Header: \"Last Name\",\n        accessor: \"name.last\",\n        sortType: \"basic\",\n      },\n      {\n        Header: \"Email\",\n        accessor: \"email\",\n        sortType: \"basic\",\n      },\n      {\n        Header: \"Phone\",\n        accessor: \"phone\",\n        sortType: \"basic\",\n      },\n      {\n        Header: \"State\",\n        accessor: \"location.state\",\n        sortType: \"basic\",\n      },\n      {\n        Header: \"Age\",\n        accessor: \"dob.age\",\n        sortType: \"basic\",\n      },\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        // This is where you can enter input to filter on first name.\n        filters: [\n          {\n            id: \"name.first\",\n            value: \"\",\n          },\n        ],\n      },\n    },\n    // useFilters,\n    useSortBy\n  );\n\n  return (\n    <Table striped bordered hover dark {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th\n                {...column.getHeaderProps(\n                  column.getSortByToggleProps()\n                )}\n              >\n                {column.render(\"Header\")}\n                <span>\n                  +/-{\" \"}\n                  {column.isSorted\n                    ? column.isSortedDesc\n                      ? \" ðŸ”½\"\n                      : \" ðŸ”¼\"\n                    : \"\"}{\" \"}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return (\n                  <td {...cell.getCellProps()}>\n                    {cell.render(\"Cell\")}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default DataTable;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport API from \"./utils/API\";\nimport DataTable from \"./components/Table/Data-Table\";\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  useEffect(() => {\n    API.getEmployees().then((res) => {\n      console.log(res);\n      setEmployees(res.data.results);\n    });\n  }, []);\n  \n  return (\n    <div>\n      <Router>\n        <div>\n          <Navbar />\n          <DataTable employees={employees} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}