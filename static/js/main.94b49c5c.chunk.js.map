{"version":3,"sources":["components/Navbar/Navbar.js","utils/API.js","components/Table/Data-Table.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","axios","get","DataTable","data","React","useMemo","employees","columns","Header","accessor","Cell","first","last","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","border","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","App","setEmployees","useEffect","API","then","res","console","log","results","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94b49c5c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText,\n} from \"reactstrap\";\n\nconst Navigation = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/components/\">Components</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">\n                GitHub\n              </NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Options\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>Option 1</DropdownItem>\n                <DropdownItem>Option 2</DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>Reset</DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Simple Text</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import axios from \"axios\";\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/\");\n  },\n};\n","import React from \"react\";\nimport { useTable } from \"react-table\";\n\nfunction DataTable(props) {\n    const data = React.useMemo(\n        () => props.employees,\n        []\n      )\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Image\",\n        accessor: \"picture.thumbnail\", // accessor is the \"key\" in the data\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n        Cell: (props) => (\n          <span>\n            {props.first} {props.last}\n          </span>\n        ),\n      },\n      {\n        Header: \"Email\",\n        accessor: \"email\", // accessor is the \"key\" in the data\n      },\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data });\n\n  return (\n    <table {...getTableProps()} style={{ border: \"solid 1px blue\" }}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th\n                {...column.getHeaderProps()}\n                style={{\n                  borderBottom: \"solid 3px red\",\n                  background: \"aliceblue\",\n                  color: \"black\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                {column.render(\"Header\")}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                    style={{\n                      padding: \"10px\",\n                      border: \"solid 1px gray\",\n                      background: \"papayawhip\",\n                    }}\n                  >\n                    {cell.render(\"Cell\")}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DataTable;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport API from \"./utils/API\";\nimport DataTable from \"./components/Table/Data-Table\";\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  useEffect(() => {\n    API.getEmployees().then((res) => {\n      console.log(res);\n      setEmployees(res.data.results);\n    });\n  }, []);\n  return (\n    <div>\n      <Router>\n        <div>\n          <Navbar />\n          <Route\n            exact\n            path=\"/\"\n            render={() => <DataTable employees={employees} />}\n          />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}